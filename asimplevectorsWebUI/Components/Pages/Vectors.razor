@page "/space/{spaceName}/version/{strVersionId}/vector"
@rendermode RenderMode.InteractiveServer
@using asimplevectors.Models
@inject asimplevectors.Services.asimplevectorsClient Client
@using Microsoft.AspNetCore.Components.Web
@inject IJSRuntime JSRuntime

<h3>Vectors for Version @strVersionId</h3>

@if (vectors == null)
{
    <p><em>Loading...</em></p>
}
else if (!vectors.Any())
{
    <p>No vectors found.</p>
}
else
{
    <div>
        <input type="text" @bind="filter" placeholder="Filter" style="width: 300px;" />
        <button @onclick="ApplyFilter">Search</button>
    </div>
    <p>Total Vectors: @totalVectors</p>
    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>Data</th>
                <th>Metadata</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var vector in vectors)
            {
                <tr>
                    <td>@vector.Id</td>
                    <td>@string.Join(", ", vector.Data)</td>
                    <td>@string.Join(", ", ((Dictionary<string, object>)vector.Metadata).Select(kv => $"{kv.Key}: {kv.Value}"))</td>
                </tr>
            }
        </tbody>
    </table>
    <div class="pagination">
        <button class="btn btn-secondary" @onclick="LoadPreviousPage" disabled="@(!canLoadPrevious)">Previous</button>
        <span>Page @currentPage of @totalPages</span>
        <button class="btn btn-secondary" @onclick="LoadNextPage" disabled="@(!canLoadNext)">Next</button>
    </div>
}

@code {
    [Parameter]
    public string spaceName { get; set; }
    [Parameter]
    public string strVersionId { get; set; }
    public int versionId { get; set; }

    private List<VectorData> vectors;
    private int currentPage = 1;
    private const int pageSize = 10;
    private bool canLoadPrevious => currentPage > 1;
    private bool canLoadNext => vectors != null && vectors.Count == pageSize;
    private int totalVectors = 0;
    private int totalPages = 1;
    private string filter = string.Empty;

    protected override async Task OnParametersSetAsync()
    {
        if (int.TryParse(strVersionId, out int parsedVersionId))
        {
            versionId = parsedVersionId;
            await LoadVectors();
        }
        else
        {
            // Handle error: invalid strVersionId
        }
    }

    private async Task LoadVectors()
    {
        currentPage = 1;
        await LoadPage();
    }

    private async Task LoadPage()
    {
        var response = await Client.GetVectorsByVersionAsync(spaceName, versionId, start: (currentPage - 1) * pageSize, limit: pageSize, filter: filter);
        vectors = response.Vectors.ToList();
        totalVectors = response.TotalCount;
        totalPages = (int)Math.Ceiling((double)totalVectors / pageSize);
        StateHasChanged();
    }

    private async Task LoadPreviousPage()
    {
        if (canLoadPrevious)
        {
            currentPage--;
            await LoadPage();
            StateHasChanged();
        }
    }

    private async Task LoadNextPage()
    {
        if (canLoadNext)
        {
            currentPage++;
            await LoadPage();
            StateHasChanged();
        }
    }

    private async Task ApplyFilter()
    {
        currentPage = 1;
        await LoadPage();
    }
}
