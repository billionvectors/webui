@page "/cluster"
@rendermode RenderMode.InteractiveServer
@inject asimplevectors.Services.asimplevectorsClient Client
@inject ILogger<Cluster> Logger
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@using asimplevectors.Models

<PageTitle>Clusters</PageTitle>

<h1>Clusters</h1>

<p>This component demonstrates managing clusters.</p>

<button class="btn btn-primary mb-3" @onclick="ShowAddNodeModal">Add Node</button>

@if (showAddNodeModal)
{
    <div class="modal show d-block" tabindex="-1" role="dialog">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Add Node</h5>
                    <button type="button" class="btn-close" @onclick="CloseAddNodeModal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label for="nodeId" class="form-label">Node ID</label>
                        <input type="number" id="nodeId" class="form-control" @bind="nodeId" />
                    </div>
                    <div class="mb-3">
                        <label for="nodeAddress" class="form-label">Node Address</label>
                        <input type="text" id="nodeAddress" class="form-control" @bind="nodeAddress" />
                    </div>
                    <div class="mb-3">
                        <label for="nodePort" class="form-label">Node Port</label>
                        <input type="text" id="nodePort" class="form-control" @bind="nodePort" />
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-primary" @onclick="AddNode">Add</button>
                    <button type="button" class="btn btn-secondary" @onclick="CloseAddNodeModal">Cancel</button>
                </div>
            </div>
        </div>
    </div>
}

@if (metrics != null)
{
    <table class="table">
        <thead>
            <tr>
                <th>Node ID</th>
                <th>RPC Address</th>
                <th>API Address</th>
                <th>Leader</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var node in metrics.MembershipConfig.Membership.Nodes)
            {
                <tr>
                    <td>@node.Key</td>
                    <td>@node.Value.RpcAddr</td>
                    <td>@node.Value.ApiAddr</td>
                    <td>@(metrics.Vote.LeaderId.NodeId == node.Key ? "O" : "")</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private bool showAddNodeModal = false;
    private string clusterName;
    private string description;
    private int nodeId;
    private string nodeAddress;
    private string nodePort;
    private ClusterMetricsResponse metrics;

    protected override async Task OnInitializedAsync()
    {
        if (Client == null || string.IsNullOrEmpty(Client.BaseUrl))
        {
            Logger.LogWarning("Base URL or Client is null. Redirecting to Config page.");
            NavigationManager.NavigateTo("/config");
            return;
        }

        await LoadClustersAsync();
    }

    private async Task LoadClustersAsync()
    {
        try
        {
            metrics = await Client.GetClusterMetricsAsync();
            Logger.LogInformation($"Metrics:\n{metrics}");
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Logger.LogError($"Error loading clusters: {ex.Message}");
        }
    }

    private async Task ShowAddNodeModal()
    {
        Logger.LogInformation("ShowAddNodeModal called.");
        showAddNodeModal = true;
        StateHasChanged();
    }

    private async Task CloseAddNodeModal()
    {
        Logger.LogInformation("CloseAddNodeModal called.");
        showAddNodeModal = false;
        StateHasChanged();
    }

    private async Task AddNode()
    {
        try
        {
            Logger.LogInformation($"Adding node: {nodeId} at {nodeAddress}:{nodePort}");
            await Client.AddLearnerAsync(nodeId, nodeAddress, nodePort);
            Logger.LogInformation("Node added successfully.");
            CloseAddNodeModal();
        }
        catch (Exception ex)
        {
            Logger.LogError($"Error adding node: {ex.Message}");
            await ShowErrorMessageAsync("Error adding node. Please check the details and try again.");
        }
    }

    private bool IsValidClusterName(string name)
    {
        return name.All(c => char.IsLetterOrDigit(c) || c == '_' || c == '-');
    }

    private async Task ShowErrorMessageAsync(string message)
    {
        await JSRuntime.InvokeVoidAsync("alert", message);
    }
}
